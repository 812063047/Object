package com.xzq.bos.web.action.base;

import java.io.IOException;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.util.List;

import org.apache.struts2.ServletActionContext;
import org.hibernate.criterion.DetachedCriteria;

import com.opensymphony.xwork2.ActionSupport;
import com.opensymphony.xwork2.ModelDriven;
import com.xzq.bos.domain.Region;
import com.xzq.bos.domain.Staff;
import com.xzq.bos.utils.PageBean;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import net.sf.json.JsonConfig;

/*
 * 表现层通用实现
 * */
public class BaseAction<T> extends ActionSupport implements ModelDriven<T>{
	protected PageBean pageBean=new PageBean();
	//创建离线提交查询对象
	DetachedCriteria detachedCriteria=null;
	/*protected int page;
	protected int rows;*/
	
	//属性驱动，接收页面提交的分页参数

		public void setPage(int page) {
			pageBean.setCurrentPage(page);
			//this.page = page;
		}
		public void setRows(int rows) {
			pageBean.setPageSize(rows);
			//this.rows = rows;
		}
		
		/**将指定java对象转为json，并响应到客户端页面
		 * @param o
		 * @param exclueds
		 */
		public void javaToJson(Object o,String[] exclueds) {
			JsonConfig jsonConfig=new JsonConfig();
			//指定那些属性不需要转json
			jsonConfig.setExcludes(exclueds);
			String json=JSONObject.fromObject(o,jsonConfig).toString();
			ServletActionContext.getResponse().setContentType("text/html;charset=utf-8");
			try {
				ServletActionContext.getResponse().getWriter().print(json);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		public void javaToJson(List o,String[] exclueds) {
			JsonConfig jsonConfig=new JsonConfig();
			//指定那些属性不需要转json
			jsonConfig.setExcludes(exclueds);
			String json=JSONArray.fromObject(o,jsonConfig).toString();
			ServletActionContext.getResponse().setContentType("text/html;charset=utf-8");
			try {
				ServletActionContext.getResponse().getWriter().print(json);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	public static final String HOME="home";
	public static final String LIST="list";
	//模型对象
	protected T model;
	public T getModel() {
		return model;
	}
	//在构造方法中动态获取实体类型，通过反射创建model对象
	public BaseAction(){
		ParameterizedType superclass=(ParameterizedType) this.getClass().getGenericSuperclass();
		Type[] actualTypeArguments =superclass.getActualTypeArguments();
		Class<T> entityClass= (Class<T>)actualTypeArguments[0];
		 detachedCriteria=DetachedCriteria.forClass(entityClass);
		 pageBean.setDetachedCriteria(detachedCriteria);
		//通过发射创建对象
		try {
			model=entityClass.newInstance();
		} catch (InstantiationException e) {
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			e.printStackTrace();
		}
	}
}
