package com.xzq.bos.web.action;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.ServletOutputStream;

import org.apache.commons.lang.exception.Nestable;
import org.apache.commons.lang3.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Row;
import org.apache.struts2.ServletActionContext;
import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Restrictions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;

import com.xzq.bos.domain.Region;
import com.xzq.bos.domain.Subarea;
import com.xzq.bos.service.ISubareaService;
import com.xzq.bos.utils.FileUtils;
import com.xzq.bos.web.action.base.BaseAction;

@Controller
@Scope("prototype")
public class SubareaAction extends BaseAction<Subarea> {
	
	@Autowired
	private ISubareaService subareaService;
	
	/**
	 * 分页action
	 * @return
	 */
	public String pageQuery() {
		//System.out.println(model);
		DetachedCriteria dc=pageBean.getDetachedCriteria();
		//动态添加过滤条件
		String addressKey=model.getAddresskey();
		if(StringUtils.isNotBlank(addressKey)) {
			
			dc.add(Restrictions.like("addressKey", "%"+addressKey+"%"));
		}		
		Region region=model.getRegion();
		if(region!=null) {
			String province=region.getProvince();
			String city=region.getCity();
			String district=region.getDistrict();
			dc.createAlias("region", "r");
			if(StringUtils.isNotBlank(province)) {
				//参数一：分区对象关联的区域对象属性名称
				dc.add(Restrictions.like("r.province", "%"+province+"%"));
			}
			if(StringUtils.isNotBlank(city)) {
				//参数一：分区对象关联的区域对象属性名称
				dc.add(Restrictions.like("r.city", "%"+city+"%"));
			}
			if(StringUtils.isNotBlank(district)) {
				//参数一：分区对象关联的区域对象属性名称
				dc.add(Restrictions.like("r.district", "%"+district+"%"));
			}
		}
		subareaService.pageQuery(pageBean);
		this.javaToJson(pageBean, new String[] {"currentPage","detachedCriteria","pageSize","decidedzone",
				"subareas"});
		return NONE;
	}
	/**
	 * 添加分区
	 * @return
	 */
	public String addSubarea() {
		subareaService.save(model);
		return LIST;
	}
	
	/**
	 * 修改分区
	 * @return
	 */
	public String editSubarea() {
		Subarea subarea=subareaService.findById(model.getId());
		subarea.setAddresskey(model.getAddresskey());
		subarea.setStartnum(model.getStartnum());
		subarea.setEndnum(model.getEndnum());
		subarea.setRegion(model.getRegion());
		subarea.setSingle(model.getSingle());
		subarea.setPosition(model.getPosition());
		subareaService.update(subarea);
		return LIST;
	}
	
	/**
	 * 删除地区
	 * @return
	 */
	private String ids;
	
	public void setIds(String ids) {
		this.ids = ids;
	}
	public String deleteBatch() {
		subareaService.deleteBatch(ids);
		return LIST;
	}
	/**
	 * 分区导出功能
	 * @return
	 * @throws IOException 
	 */
	public String exportXls() throws IOException {
		List<Subarea> subareaList=subareaService.findAll();
		HSSFWorkbook workbook=new HSSFWorkbook();
		HSSFSheet sheet=workbook.createSheet("分区数据");
		//创建标题行
		HSSFRow headRow=sheet.createRow(0);
		headRow.createCell(0).setCellValue("分区编号");
		headRow.createCell(1).setCellValue("开始编号");
		headRow.createCell(2).setCellValue("结束编号");
		headRow.createCell(3).setCellValue("位置信息");
		headRow.createCell(4).setCellValue("省市区");
        for (Subarea subarea : subareaList) {
        	HSSFRow dataRow=sheet.createRow(sheet.getLastRowNum()+1);
        	dataRow.createCell(0).setCellValue(subarea.getId());
        	dataRow.createCell(1).setCellValue(subarea.getStartnum());
        	dataRow.createCell(2).setCellValue(subarea.getEndnum());
        	dataRow.createCell(3).setCellValue(subarea.getPosition());
        	dataRow.createCell(4).setCellValue(subarea.getRegion().getName());
		}
        
           //第三步：使用输出流进行文件下载（一个流、两个头）
		
      		String filename = "分区数据.xls";
      		String contentType = ServletActionContext.getServletContext().getMimeType(filename);
      		ServletOutputStream out = ServletActionContext.getResponse().getOutputStream();
      		ServletActionContext.getResponse().setContentType(contentType);
      		
      		//获取客户端浏览器类型
      		String agent = ServletActionContext.getRequest().getHeader("User-Agent");
      		filename = FileUtils.encodeDownloadFilename(filename, agent);
      		ServletActionContext.getResponse().setHeader("content-disposition", "attachment;filename="+filename);
      		workbook.write(out);
      		return NONE;
	}
	
	
	/**
	 * 所有未关联到定区的分区，返回json数据
	 * @return
	 */
	public String listAjax() {
		List<Subarea> subareaList=subareaService.findListAssociation();
		this.javaToJson(subareaList, new String [] {"decidedzone","region"});
		return NONE;
	}
	
	//属性驱动，接收定区id
		private String decidedzoneId;
		
		/**
		 * 根据定区id查询关联的分区
		 */
		public String findListByDecidedzoneId(){
			List<Subarea> list = subareaService.findListByDecidedzoneId(decidedzoneId);
			this.javaToJson(list, new String[]{"decidedzone","subareas"});
			return NONE;
		}

		public String getDecidedzoneId() {
			return decidedzoneId;
		}

		public void setDecidedzoneId(String decidedzoneId) {
			this.decidedzoneId = decidedzoneId;
		}
}
